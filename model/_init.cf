entity MongoDBNodeWithServer extends ip::services::Server:
	"""
		This is a collection of a node, server and basic mongodb
	"""
end

entity MongoDBNode:
	"""
		This is a database node
	"""
	string port = "27018"
	string datadir = "/var/lib/mongodb"
end

entity MongoDBReplicaSet:
	"""
		This contains a set of database nodes and gives higher availibility 
	"""
	string name
end

entity MongoDBReplicaSetController:
	"""
		This is the controller of a replica set
	"""
end

entity MongoDBConfigServer:
	"""
		This is a config server from mongodb
	"""
	string port = "27019"
end

entity MongoDBAccessServer:
	"""
		This is a node to access to server
	"""
	string port = "27017"
end

entity MongoDBShardCluster:
	"""
		This is for sharding the data.
	"""
end

entity MongoDBShardController:
	"""
		This is the controller of a sharding set
	"""
end

entity MongoDB extends ip::services::Server:
	"""
		This is for having the mongo commands
	"""
end

entity MongoDBServer extends ip::services::Server:
	"""
		This is for having the mongodbserver
	"""
end

entity MongoDBDatabase:
	"""
		Before you can shard a collection, you must enable sharding for the collections database. 
		Enabling sharding for a database does not redistribute data but make it possible to shard the collections in that database.
	"""
	string name
end


entity MongoDBCollection: 
	string name
	bool isSharded = true
end

entity MongoDBKey:
	string name
	bool isNumeric = false
	string valueString = ""
	number valueNumber = 0
end

entity MongoDBMonitoringAgent extends ip::services::Server:
	string key
	string directory = "/root/monitoring"
end

MongoDBNodeWithServer instance [0:1] -- [1] MongoDB mongoDB
MongoDBNodeWithServer instance [0:1] -- [1] MongoDBServer server
MongoDBNodeWithServer instance [0:1] -- [1] MongoDBNode node
implement MongoDBNodeWithServer using collectionImpl
	
""" REPLICATA """
MongoDBReplicaSet replicaSet [0:1] -- [1:] MongoDBNode nodes
MongoDBReplicaSet replicaSet [1] -- [1] MongoDBReplicaSetController replicaSetController
MongoDBReplicaSetController replicaSetController [0:1] -- [1] MongoDBNode connectingNode



""" SHARDING """
	""" Access and config """
	MongoDBConfigServer configServers [1:3] -- [1] MongoDBShardCluster shardCluster
	MongoDBAccessServer accessServers [1:] -- [1] MongoDBShardCluster shardCluster

	""" Nodes """
	MongoDBShardCluster shardCluster [0:1] -- [0:] MongoDBReplicaSet replicaSets
	MongoDBShardCluster shardCluster [0:1] -- [0:] MongoDBNode singleNodes 
	"""Niet aangeraden in productie omgeving weglaten? """
	
	
	MongoDBShardCluster shardCluster [1] -- [1] MongoDBShardController shardController
	MongoDBShardController shardController [0:1] -- [1] MongoDBAccessServer accessServer
	
	""" Databases and co """
	MongoDBShardCluster shardCluster [1] -- [0:] MongoDBDatabase databases
	MongoDBDatabase database [1] -- [0:] MongoDBCollection collections
	MongoDBCollection collection [1] -- [0:] MongoDBKey keys
	
	""" Logging """
	MongoDBMonitoringAgent agent [0:1] -- [0:1] MongoDBShardCluster shardCluster
	
""" Getting all the service connections """
	MongoDBServer server [1] -- [0:1] MongoDBNode node
	MongoDBServer server [1] -- [0:1] MongoDBConfigServer configServer
	MongoDBServer server [1] -- [0:1] MongoDBAccessServer accessServer
	
	MongoDB host [1] -- [0:1] MongoDBNode node
	MongoDB host [1] -- [0:1] MongoDBConfigServer configServer
	MongoDB host [1] -- [0:1] MongoDBAccessServer accessServer
	
	MongoDB host [1] -- [0:1] MongoDBReplicaSetController replicaSetController
	MongoDB host [1] -- [0:1] MongoDBShardController shardController

"""ip::Host host [1] -- [0:1] MongoDBNode node 
ip::Host host [1] -- [0:1] MongoDBReplicaSetController replicaSetController """


""" Implementations """

	implement MongoDB using hostImp
	implement MongoDBServer using serverImp


	""" Nodes """
		implement MongoDBNode using nodeImpNonR when isset(self.replicaSet) == true
		implement MongoDBNode using nodeImpR when isset(self.replicaSet) == false
		
	""" Set """	
		implement MongoDBReplicaSet using replicaSetImpl
		implement MongoDBReplicaSetController using std::none
		
	""" Sharding """
		implement MongoDBConfigServer using configServerImpl
		implement MongoDBAccessServer using accessServerImpl
		
		implement MongoDBShardCluster using shardClusterImpl
		implement MongoDBShardController using std::none
		
	""" Databases """
		implement MongoDBDatabase using std::none
		implement MongoDBCollection using std::none
		implement MongoDBKey using std::none
		
	""" Logging """
		implement MongoDBMonitoringAgent using loggingAgent
		
implementation collectionImpl:
	self.mongoDB = mongodb::MongoDB(host = self.host)
	self.server = mongodb::MongoDBServer(host = self.host)
	self.node = mongodb::MongoDBNode(host = self.mongoDB, server = self.server)
end	

implementation hostImp:
	repoFile = std::File(host = host, path = "/etc/yum.repos.d/mongodb.repo", content = file("mongodb/mongodb.repo"), 
                             owner = "root", group = "root", mode = 755)
	pkg = 	std::Package(host = host, name = "mongo-10gen", state = "installed", requires = repoFile)
	
	atPkg = 	std::Package(host = host, name = "at", state = "installed")
	atService = std::Service(host = host, name = "atd", state = "running", onboot = true, requires=atPkg)
end

implementation serverImp:
                              
	pkg2 = 	std::Package(host = host, name = "mongo-10gen-server", state = "installed", requires = svcIncrease)
	pkg2.requires = std::File[host = host, path = "/etc/yum.repos.d/mongodb.repo"]
	
	fileIncrease = std::File(host = host, path = "/usr/bin/mongodb-file-increase", content = file("mongodb/mongodb-file-increase"), 
                             owner = "root", group = "root", mode = 755)
    svcFileIncrease = std::File(host = host, path = "/lib/systemd/system/mongodb-file-increase.service", 
                                content = file("mongodb/mongodb-file-increase.service"), owner = "root", group = "root", mode = 755)
    
    svcIncrease = std::Service(host = host, name = "mongodb-file-increase", state = "running", onboot = true, requires = [fileIncrease, svcFileIncrease])
	
end


implementation nodeImpNonR:
	config_cfg = std::ConfigFile(host = server.host, path = "/etc/mongodb.conf",
        	content = template("mongodb/mongodb-node-single.tmpl"), reload = true)
	config_cfg.requires=std::Package[host = server.host, name ="mongodb-server"]  
	
	datadirCreate = std::Directory(host = host, path = datadir, owner = "mongodb", group = "mongodb", mode = 755, reload = true)
	
	repoFile = std::File(host = server.host, path = "/lib/systemd/system/mongodb-dataserver.service", content = file("mongodb/mongodb-dataserver.service"), 
                             owner = "root", group = "root", mode = 755)
                             
	serviceRun = std::Service(host = server.host, name = "mongod-dataserver", state = "running", onboot = true)
	serviceRun.requires = [config_cfg, datadirCreate, repoFile]
end

implementation nodeImpR:
	config_cfg = std::ConfigFile(host = server.host, path = "/etc/mongodb.conf",
       		content = template("mongodb/mongodb-node-replica.tmpl"), reload = true)   
	config_cfg.requires=std::Package[host = server.host, name ="mongo-10gen-server"]  
	
	datadirCreate = std::Directory(host = server.host, path = "{{ datadir }}", owner = "mongodb", group = "mongodb", mode = 755, reload = true)

	datadirCreateDB = std::Directory(host = server.host, path = "{{ datadir }}/db", owner = "mongodb", group = "mongodb", mode = 755, reload = true)
	datadirCreateDB.requires = datadirCreate
	datadirCreateLog = std::Directory(host = server.host, path = "{{ datadir }}/log", owner = "mongodb", group = "mongodb", mode = 755, reload = true)
	datadirCreateLog.requires = datadirCreate
	
	repoFile = std::File(host = server.host, path = "/lib/systemd/system/mongodb-dataserver.service", content = file("mongodb/mongodb-dataserver.service"), 
                             owner = "root", group = "root", mode = 755)
	
	serviceRun = std::Service(host = server.host, name = "mongod-dataserver", state = "running", onboot = true)
	serviceRun.requires = [config_cfg, datadirCreate, repoFile]

end

implementation replicaSetImpl:
	"""TODO require in orde maken... """
	scriptConfig = std::ConfigFile(host = replicaSetController.host.host, path = "/etc/mongodb-replicanodes.conf",
        	content = template("mongodb/mongodb-replicanodes.conf.tmpl"), reload = true)
	
	script = std::File(host = replicaSetController.host.host, path = "/usr/bin/mongodb-replicanodes",
        	content = template("mongodb/mongodb-replicanodes.sh.tmpl"), owner="root", group="root", mode=755, reload = true)
	
	serviceFile = std::File(host = replicaSetController.host.host, path = "/lib/systemd/system/mongodb-replicanodes.service", owner = "root",
		group = "root", mode = 755, requires = script, content = file("mongodb/mongodb-replicanodes.service"), reload = true)
	
	serviceRun = std::Service(host = replicaSetController.host.host, name = "mongodb-replicanodes", state = "running", onboot = true,
		requires = [scriptConfig, script, serviceFile])
	serviceRun.requires = std::Package[host = replicaSetController.host.host, name ="mongo-10gen"]  
end

implementation configServerImpl:
	scriptConfig = std::File(host = server.host, path = "/usr/bin/mongodb-configserver",
        	content = file("mongodb/mongodb-configserver"), owner="root", group="root", mode=755, reload = true)
	
	serviceFile = std::File(host = server.host, path = "/lib/systemd/system/mongodb-configserver.service", owner = "root",
		group = "root", mode = 755, content = file("mongodb/mongodb-configserver.service"), reload = true)
	
	configFile =  std::ConfigFile(host = server.host, path = "/etc/mongodb-configserver.conf",
        	content = template("mongodb/mongodb-configserver.tmpl"), reload = true)
	
	dataDirectory = std::Directory(host = server.host, path = "/var/log/mongodbconfig", owner="root", group="root", mode = 755)
	
	serviceRun = std::Service(host = server.host, name = "mongodb-configserver", state = "running", onboot = true,
		requires = [scriptConfig, serviceFile, configFile, dataDirectory])
	serviceRun.requires = std::Package[host = server.host, name ="mongodb-server"]
end

implementation accessServerImpl:
	"""TODO require in orde maken... """
	scriptConfig = std::File(host = server.host, path = "/usr/bin/mongodb-accessserver",
        	content = file("mongodb/mongodb-accessserver"), owner="root", group="root", mode=755, reload = true)
	
	serviceFile = std::File(host = server.host, path = "/lib/systemd/system/mongodb-accessserver.service", owner = "root",
		group = "root", mode = 755, content = file("mongodb/mongodb-accessserver.service"), reload = true)
	
	configFile =  std::ConfigFile(host = server.host, path = "/etc/mongodb-accessserver.conf",
        	content = template("mongodb/mongodb-accessserver.tmpl"), reload = true)
	
	serviceRun = std::Service(host = server.host, name = "mongodb-accessserver", state = "running", onboot = true,
		requires = [configFile, scriptConfig, serviceFile])
	
	serviceRun.requires = std::Package[host = server.host, name ="mongo-10gen-server"]

end

implementation shardClusterImpl:
	scriptNodesConfigSingle = std::ConfigFile(host = shardController.host.host, path = "/etc/mongodb-shardednodes-single.conf",
        	content = template("mongodb/mongodb-shardednodes-single.conf.tmpl"), reload = true)
	
	scriptNodesConfigReplica = std::ConfigFile(host = shardController.host.host, path = "/etc/mongodb-shardednodes-replica.conf",
        	content = template("mongodb/mongodb-shardednodes-replica.conf.tmpl"), reload = true)
	
	scriptNodes = std::File(host = shardController.host.host, path = "/usr/bin/mongodb-shardednodes",
        	content = template("mongodb/mongodb-shardednodes.sh.tmpl"), owner="root", group="root", mode=755, reload = true)
	
	serviceFileNodes = std::File(host = shardController.host.host, path = "/lib/systemd/system/mongodb-shardednodes.service", owner = "root",
		group = "root", mode = 755, content = file("mongodb/mongodb-shardednodes.service"), reload = true)
	
	serviceRunNodes = std::Service(host = shardController.host.host, name = "mongodb-shardednodes", state = "running", onboot = true,
		requires = [scriptNodesConfigSingle, scriptNodesConfigReplica, scriptNodes, serviceFileNodes])
	serviceRunNodes.requires = std::Package[host = shardController.host.host, name ="mongo-10gen"]

	
	
	
	scriptDatabaseConfig = std::ConfigFile(host = shardController.host.host, path = "/etc/mongodb-shardeddatabases.conf",
        	content = template("mongodb/mongodb-shardeddatabases.conf.tmpl"), reload = true)
	
	scriptDatabase =  std::File(host = shardController.host.host, path = "/usr/bin/mongodb-shardeddatabases",
        	content = template("mongodb/mongodb-shardeddatabases.sh.tmpl"), owner="root", group="root", mode=755, reload = true)
	
	serviceFileDatabase = std::File(host = shardController.host.host, path = "/lib/systemd/system/mongodb-shardeddatabases.service", owner = "root",
		group = "root", mode = 755, content = file("mongodb/mongodb-shardeddatabases.service"), reload = true)
	
	serviceRunDatabase = std::Service(host = shardController.host.host, name = "mongodb-shardeddatabases", state = "running", onboot = true,
		requires = [scriptDatabaseConfig, scriptDatabase, serviceFileDatabase])
	serviceRunDatabase.requires = std::Package[host = shardController.host.host, name ="mongo-10gen"]
	
	
	
	scriptCollectionConfig = std::ConfigFile(host = shardController.host.host, path = "/etc/mongodb-shardedcollections.conf",
        	content = template("mongodb/mongodb-shardedcollections.conf.tmpl"), reload = true)
	
	scriptCollection =  std::File(host = shardController.host.host, path = "/usr/bin/mongodb-shardedcollections",
        	content = template("mongodb/mongodb-shardedcollections.sh.tmpl"), owner="root", group="root", mode=755, reload = true)
	
	serviceFileCollection = std::File(host = shardController.host.host, path = "/lib/systemd/system/mongodb-shardedcollections.service", owner = "root",
		group = "root", mode = 755, content = file("mongodb/mongodb-shardedcollections.service"), reload = true)
	
	serviceRunCollection = std::Service(host = shardController.host.host, name = "mongodb-shardedcollections", state = "running", onboot = true,
		requires = [scriptCollectionConfig, scriptCollection, serviceFileCollection, serviceRunDatabase, serviceRunNodes])
	serviceRunCollection.requires = std::Package[host = shardController.host.host, name ="mongo-10gen"]	

end

implementation loggingAgent:
	pkg = 	std::Package(host = host, name = "tar", state = "installed")
	
    basedir = std::Directory(host = host, path = directory, owner = "root", group = "root", mode = 755, reload = true)

	
	configLogging =  std::File(host = host, path = "{{directory}}/monitoring-agent.config",
        	content = template("mongodb/monitoring-agent.config.tmpl"), owner="root", group="root", mode=755, reload = true)
	configLogging.requires = basedir
	
	serviceScript =  std::File(host = host, path = "{{directory}}/mongodb-mms-monitoring-agent-script",
        	content = template("mongodb/mongodb-mms-monitoring-agent-script.sh.tmpl"), owner="root", group="root", mode=755, reload = true)
	serviceScript.requires = basedir
	
	serviceFile = std::File(host = shardController.host.host, path = "/lib/systemd/system/mongodb-mms-monitoring-agent.service", owner = "root",
		group = "root", mode = 755, content = template("mongodb/mongodb-mms-monitoring-agent.service.tmpl"), reload = true)
	serviceFile.requires = basedir
	
	serviceRunCollection = std::Service(host = host, name = "mongodb-mms-monitoring-agent", state = "running", onboot = true)
	serviceRunCollection.requires = [configLogging, serviceFile, serviceScript]


end
